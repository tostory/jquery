<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >	
<!-- namespace : mapper별로 구분자
	각 sql별로 id값이 있는데, 공통적인 부분을 선언
	
	id : 패키지명.인터페이스명.메서드 ==> DAO와 연결
		해당 sql을 통해서 DAO에서 넘겨준 데이터를 조건(parameterType)으로
		처리할 뿐 아니라, 해당 id에 매핑되는 DAO에 실제
		객체(ArrayList<VO>)로 넘긴다.
	
 -->	
<mapper namespace="springweb.c01_database.repository.A01_EmpRep">
	<!--  다수의 결과물 객체를선언하겠습니다.:resultMap
		  단위 객체의 type은  mybatis.Spring.xml에서
		  선언한 alias으로 된 emp01입니다.
		 ex) ArrayList<Emp>
		 이름(id)은  empMap으로 하겠습니다.
		 
		  단일 객체를 return할때는? resultType="emp"
	 -->
	<resultMap type="emp" id="empMap"/>
	
	<!-- 외부에서 VO객체로 데이터를 넘겨받을 때,
		DAO단의 parameter: empList(Emp sch) 
		==> parameterType="emp"
		#{ename} ==> emp.getEname()
	 -->
	<select id="emplist"
		resultMap="empMap"
		parameterType="emp">
		select * from emp
		where ename like '%'||#{ename} ||'%'
	</select>
	<select id="emplist2"
		resultMap="empMap"
		parameterType="emp">
		select * from emp
		where ename = #{ename}
	</select>	
	<!-- 
		id="emplist" ==> dao단에 어떤 메서드와 연결되어 그
			 dao에 데이터 넘길지를 선언
		resultMap="empMap"은  ==> ArrayList<Emp> 
			형태로 데이터를 넘기겠습니다.
			ex) public Emp getEmp();
		resultType="emp"
			ex) public void insertEmp()
			resultMap, resultType이 필요 없다.
		parameterType="emp"
			ex) public Emp getEmp(Emp e)
			만일에 메서드가 입력값이 없으면 선언할 필요가 없다.
		parameterType="emp01"
			#{ename} : emp.getEname()		
	 -->
	<!-- 
	//	id : empOne
//	resultType="emp"
//	parameterType="int"
	 -->
	 <select id="empOne" resultType="emp" parameterType="int">
		select * 
		from emp
		where empno=#{empno}	 
	 </select>
<!-- 
 * 	id : empUpdate
 *  parameterType: emp 
 -->	 
	<update id="empUpdate" parameterType="emp">
		update emp
		 set ename=#{ename},
		     job=#{job},
			 mgr=#{mgr},
			 sal=#{sal},
			 comm=#{comm},
			 deptno=#{deptno}
		where empno=#{empno}		
	</update>
<!-- 검색 처리.. ename과 job이 있을 때에 해당 데이터가 정확히
	있을 때 검색 처리..
-->
	<select id="empList02" parameterType="emp"
		resultMap="empMap">
		SELECT * 
		FROM emp
		WHERE 1=1
		<!-- null 아니고 공백이 아닐 때.. -->
		<if test="ename!=null and ename!='' ">
			AND ename=#{ename}
		</if>
		<if test="job != null and job!='' ">
			AND job=#{job}
		</if>
		
	</select>	
	<select id="empList03" parameterType="emp" 
		resultMap="empMap">
		SELECT * FROM EMP
		WHERE 1=1
		<choose>
			<when test="sal>5000">AND deptno=10</when>		
			<when test="sal>4000">AND deptno=20</when>		
			<when test="sal>1000">AND deptno=30</when>		
			<otherwise>AND deptno=40</otherwise>		
		</choose>	
	</select>
	<select id="empMultiList" resultMap="empMap"
		parameterType="empmulti">
		SELECT * FROM EMP
		WHERE 1=1
		<if test="ename!=null and ename!='' ">
			AND ename like '%'||#{ename}||'%'
		</if>
		<if test="job != null and job!='' ">
			AND job like '%'|| #{job}||'%'
		</if>
		<if test="deptnos !=null">
			AND deptno in
			<foreach collection="deptnos" item="ckdeptno"
				open="(" close=")" separator="," >
				#{ckdeptno}	
			</foreach>
		</if>		
	</select>
	
</mapper>